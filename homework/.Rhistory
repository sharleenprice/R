plot(logUnits,logValue, col = factor(housing$after1950), xlab = "Log of Units", ylab = "Log of Value")
plot(housing$logUnits,housing$logValue, col = factor(housing$after1950), xlab = "Log of Units", ylab = "Log of Value")
housing$logValue <- log(housing$Value)
housing <- na.omit(housing)
housing <- read.csv("NYChousing.csv", as.is=TRUE)
dim(housing)
head(housing)
apply(is.na(housing), 2, sum)
housing <- na.omit(housing)
dim(housing)
housing$logValue <- log(housing$Value)
summary(housing$logValue)
housing$logUnits <-log(housing$UnitCount)
housing$after1950 <-housing$YearBuilt>=1950
plot(housing$logUnits,housing$logValue, col = factor(housing$after1950), xlab = "Log of Units", ylab = "Log of Value")
legend("bottomright", legend = levels(factor(housing$after1950)), fill = unique(factor(housing$after1950)))
cor(logUnits, logValue)
plot(housing$logUnits,housing$logValue, col = factor(housing$after1950), xlab = "Log of Units", ylab = "Log of Value")
legend("bottomright", legend = levels(factor(housing$after1950)), fill = unique(factor(housing$after1950)))
cor(logUnits, logValue)
housing$logValue <- log(housing$Value)
summary(housing$logValue)
housing$logUnits <-log(housing$UnitCount)
housing$after1950 <-housing$YearBuilt>=1950
plot(housing$logUnits,housing$logValue, col = factor(housing$after1950), xlab = "Log of Units", ylab = "Log of Value")
legend("bottomright", legend = levels(factor(housing$after1950)), fill = unique(factor(housing$after1950)))
cor(logUnits, logValue)
plot(housing$logUnits,housing$logValue, col = factor(housing$after1950), xlab = "Log of Units", ylab = "Log of Value")
legend("bottomright", legend = levels(factor(housing$after1950)), fill = unique(factor(housing$after1950)))
cor(housing$logUnits, housing$logValue)
housing <- read.csv("NYChousing.csv", as.is=TRUE)
dim(housing)
apply(is.na(housing), 2, sum)
#1) function
f<-  function(x){
return(ifelse((-1<=x | 2>=x),(1/9)*(4-x^2),0))
}
x <- seq(-1, 2, length = 100)
f.max=max(f(x))
plot(x, f(x), type="l", ylab="f(x)")
#envelope
e <- function(x) {
return(ifelse((-1 > x | x > 2), Inf, f.max))
}
lines(c(-1, -1), c(f(-1), e(-1)), lty = 1)
lines(c(2, 2), c(0, e(2)), lty = 1)
lines(x, e(x), lty = 1)
#accept-reject algorithm
n.samps <- 1000   # number of samples desired>
n       <- 0                     # counter for number samples accepted>
samps   <- numeric(n.samps) # initialize the vector of output>
while (n < n.samps)
{
y <- runif(1,-1,2)    #random draw from g
u <- runif(1)
if (u < f(y)/e(y))
{n <- n + 1
samps[n] <- y  } #simulated data
}
#histogram
hist(samps, prob = T, ylab = "f(x)", xlab = "x", main = "Histogram of draws from g(x) ")
lines(x, f(x), lty = 2)
grocery <- read.table("grocery.txt", header = TRUE, as.is = TRUE)
head(grocery)
X <- cbind(rep(1,52), grocery$X1, grocery$X2, grocery$X3)
beta_hat <- solve((t(X) %*% X)) %*% t(X) %*% grocery$Y
round(t(beta_hat), 2)
lm0 <- lm(Y ~ X1 + X2 + X3, data = grocery)
lm0
mse<- mean(lm0$residuals^2)
mse
#summary(lm0)
summary(lm0)
R<- 10000
stat.list<-rep(NA,R)
beta.list<-rep(NA,R)
for (i in 1:R){
y.sim<- 4200-0*grocery$X1+15*grocery$X2+620*grocery$X3 + rnorm(52, mean=0, sd = 5)
model.sim<-lm(y.sim~grocery$X1+grocery$X2+grocery$X3)
#beta.list[i]<-coef(model.sim)[3]
stat.list[i]<-summary(model.sim)[[4]][3,2]
}
#stat.list
head(stat.list)
#
#t.list<-seq(11,19,by=0.1)
#lines(t.list, dt(t.list, 48), col = "red")
hist(stat.list, probability = TRUE, breaks = 40)
t.list2<-seq(0.5,1.1,by=.01)
lines(t.list2, dt(t.list2, 49), col = "green")
quantile(stat.list, .9) #simulated quantile
qt(.9, 47) #true quantile
quantile(stat.list, .95) #simulated quantile
qt(.95, 47) #true quantile
quantile(stat.list, .99) #simulated quantile
qt(.99, 47) #true quantile
set.seed(0)
n<-50
x1<-rgamma(n, shape = 2)
x2 <- runif(50,10,20)
y<-10-2*x1+5*x2+rnorm(n, mean=0, sd = 5)
#cor(x1,y)
#cor(x2,y)
#summary(lm(y~x1+x2))[[4]][3,3]
R<- 1000
stat.list2<-rep(NA,R)
for (i in 1:R){
#sim model with h0 is true(beta2 = 0)
y.sim<- 10-2*x1+0*x2+rnorm(n, mean=0, sd = 5)
#estimate lm using x1 and x2
model.sim<-lm(y.sim~x1+x2)
stat.list2[i]<-summary(model.sim)[[4]][3,3]
#beta.list[i]<-coef()
}
hist(stat.list2, probability = TRUE)
t.list<-seq(-4,4,by=0.01)
lines(t.list, dt(t.list, 47), col = "red")
#significance levels
quantile(stat.list2, .9) #simulated quantile
qt(.9, 47) #true quantile
